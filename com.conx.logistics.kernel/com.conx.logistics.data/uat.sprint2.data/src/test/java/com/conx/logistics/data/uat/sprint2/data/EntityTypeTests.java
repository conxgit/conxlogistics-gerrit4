package com.conx.logistics.data.uat.sprint2.data;

import java.util.ArrayList;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.PersistenceContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.conx.logistics.kernel.metamodel.dao.services.IEntityTypeDAOService;
import com.conx.logistics.mdm.domain.BaseEntity;
import com.conx.logistics.mdm.domain.metadata.DefaultEntityMetadata;
import com.conx.logistics.mdm.domain.metamodel.EntityType;
import com.conx.logistics.mdm.domain.metamodel.EntityTypeAttribute;
import com.conx.logistics.mdm.domain.organization.Contact;

@ContextConfiguration(locations = { "/META-INF/tm.jta-module-context.xml", "/META-INF/spring/persistence.datasource.mysql.local-module-context.xml",
		"/META-INF/spring/persistence.dynaconfiguration.local-module-context.xml", "/META-INF/datasource.dao.jpa.persistence-module-context.xml", "/META-INF/mdm.dao.services.impl-module-context.xml",
		"/META-INF/metamodel.dao.jpa.persistence-module-context.xml", "/META-INF/datasource.dao.jpa.persistence-module-context.xml", "/META-INF/components.dao.jpa.persistence-module-context.xml",
		"/META-INF/documentlibrary.remote.services.impl-module-context.xml", "/META-INF/app.whse.dao.jpa.persistence-module-context.xml",
		"/META-INF/app.whse.rcv.asn.dao.jpa.persistence-module-context.xml", "/META-INF/app.whse.rcv.rcv.dao.jpa.persistence-module-context.xml",
		"/META-INF/spring/data.uat.sprint2.data-module-context.xml" })
public class EntityTypeTests extends AbstractTestNGSpringContextTests {
	@PersistenceContext
	private EntityManager em;
	@Autowired
	private ApplicationContext applicationContext;
	@Autowired
	private EntityManagerFactory conxLogisticsManagerFactory;
	@Autowired
	private IEntityTypeDAOService entityTypeDAOService;

	@BeforeClass
	public void setUp() throws Exception {
		Assert.assertNotNull(applicationContext);
		Assert.assertNotNull(entityTypeDAOService);
		Assert.assertNotNull(conxLogisticsManagerFactory);
	}

	@AfterClass
	public void tearDown() throws Exception {
	}

	@Test(enabled = true)
	public void testProvideEntityType() throws Exception {
		ArrayList<String> fieldNames = new ArrayList<String>(), foundFieldNames = new ArrayList<String>();
		fieldNames.add("id");
		fieldNames.add("name");
		fieldNames.add("code");
		fieldNames.add("active");
		fieldNames.add("dateCreated");
		fieldNames.add("dateLastUpdated");
		fieldNames.add("ownerEntityId");
		fieldNames.add("ownerEntityTypeId");
		fieldNames.add("version");
		fieldNames.add("docFolder");
		fieldNames.add("externalName");
		fieldNames.add("externalCode");
		fieldNames.add("externalRefId");
		fieldNames.add("parentRefId");
		fieldNames.add("refId");
		fieldNames.add("description");
		fieldNames.add("portalId");
		fieldNames.add("firstName");
		fieldNames.add("lastName");
		fieldNames.add("officePhoneNumber");
		fieldNames.add("cellPhoneNumber");
		fieldNames.add("faxPhoneNumber");
		fieldNames.add("email");
		fieldNames.add("entityMetadata");
		fieldNames.add("entityPK");
		fieldNames.add("note");

		EntityType entityType = entityTypeDAOService.provide(Contact.class);
		Set<EntityTypeAttribute> declaredAttributes = entityType.getAllDeclaredAttributes();
		for (EntityTypeAttribute declaredAttribute : declaredAttributes) {
			Assert.assertNotNull(declaredAttribute);
			Assert.assertTrue(fieldNames.contains(declaredAttribute.getAttribute().getName()), declaredAttribute.getAttribute().getName() + " was not a listed test field.");
			foundFieldNames.add(declaredAttribute.getAttribute().getName());
		}
		
		fieldNames.removeAll(foundFieldNames);

		Assert.assertTrue(fieldNames.size() == 0, "The following fields were not attributes generated by entityTypeDAOService.provide():\n" + fieldNames);
	}
}
